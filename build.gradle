plugins {
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
}

group = 'org.fyan102'
version = '1.0.0'
archivesBaseName = 'praxica'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    implementation 'com.google.code.gson:gson:2.10.1'
}

application {
    mainClass = 'org.fyan102.bayesiannetwork.ui.Window'
    applicationName = 'Praxica'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '--add-modules', 'com.google.gson'
    ]
}

run {
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED'
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src/main/resources']
            includes = ['**/*.ico', '**/*.png', '**/*.jpg']
        }
    }
}

test {
    useJUnitPlatform()
}

// Configure the runtime plugin for creating native installers
runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.base', 'java.desktop']
    launcher {
        noConsole = true
    }
    jpackage {
        // Platform-specific options
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            imageOptions = [
                '--win-console',
                '--icon', 'src/main/resources/icon.ico'
            ]
            installerOptions = [
                '--win-dir-chooser',
                '--win-menu',
                '--win-shortcut',
                '--name', 'Praxica',
                '--app-version', version,
                '--vendor', 'Fyan102',
                '--win-menu-group', 'Praxica',
                '--icon', 'src/main/resources/icon.ico'
            ]
        }
    }
}

// Task to create a fat JAR with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.fyan102.bayesiannetwork.ui.Window'
        attributes 'Implementation-Title': 'Praxica'
        attributes 'Implementation-Version': version
    }
    archiveClassifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to copy resources to the build directory
task copyResources(type: Copy) {
    from 'src/main/resources'
    into 'build/resources/main'
}

// Make sure resources are copied before running
run.dependsOn copyResources
fatJar.dependsOn copyResources

// Task to create a Windows executable
task createExe(type: Exec) {
    workingDir 'build/jpackage'
    commandLine 'cmd', '/c', 'jpackage',
        '--type', 'exe',
        '--input', 'lib',
        '--main-jar', 'praxica-1.0.0-all.jar',
        '--main-class', 'org.fyan102.bayesiannetwork.ui.Window',
        '--name', 'Praxica',
        '--app-version', version,
        '--vendor', 'Fyan102',
        '--win-dir-chooser',
        '--win-menu',
        '--win-shortcut',
        '--win-menu-group', 'Praxica',
        '--icon', '../src/main/resources/icon.ico'
} 